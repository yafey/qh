<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server </span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo Next 主题优化</title>
    <url>/2022/09/hexo-next-beauty/</url>
    <content><![CDATA[<p>Hexo Next 主题优化 。  </p>
<span id="more"></span>

<h1 id="Hexo基础设置"><a href="#Hexo基础设置" class="headerlink" title="Hexo基础设置"></a>Hexo基础设置</h1><h2 id="配置网站基础信息"><a href="#配置网站基础信息" class="headerlink" title="配置网站基础信息"></a>配置网站基础信息</h2><p>修改站点配置文件_config.yml中，修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Y.a.F.e.Y</span> <span class="string">Blog</span>					<span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>							<span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;Putty 本无树，MinGW 亦非台&#x27;</span>	<span class="comment"># 描述，介绍网站的</span></span><br><span class="line"><span class="attr">keywords:</span>								<span class="comment"># 网站的关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">YaFey</span>							<span class="comment"># 博主姓名</span></span><br><span class="line"><span class="attr">language:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zh-CN</span>  <span class="comment"># 中文</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Chongqing</span>				<span class="comment"># 时区</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yafey.github.io/qh</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:post_title/</span>  <span class="comment"># :year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>



<h1 id="Next主题进阶设置-hexo-next-cnblogs"><a href="#Next主题进阶设置-hexo-next-cnblogs" class="headerlink" title="Next主题进阶设置[^hexo-next-cnblogs]"></a>Next主题进阶设置[^hexo-next-cnblogs]</h1><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>默认的主题配置文件 <code>_config.next.yml</code> 中，菜单只开启了首页和归档，我们根据需要，可以添加 about、tag、categories 等菜单</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure>



<h2 id="不需要新装插件的设置"><a href="#不需要新装插件的设置" class="headerlink" title="不需要新装插件的设置"></a>不需要新装插件的设置</h2><h3 id="hexo-next主页文章预览-read-more-read-more2"><a href="#hexo-next主页文章预览-read-more-read-more2" class="headerlink" title="hexo next主页文章预览[^read-more] [^read-more2]"></a>hexo next主页文章预览[^read-more] [^read-more2]</h3><p>将<code>&lt;!-- more --&gt;</code>插入到文章后发现有效果，主页在插入处截止了预览 。 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>




<p>[^read-more]: <a href="http://blog.hizrd.com/2020/01/23/%E4%BD%BF%E7%94%A8-more-%E6%9D%A5%E6%8E%A7%E5%88%B6hexo-next%E4%B8%BB%E9%A1%B5%E6%96%87%E7%AB%A0%E9%A2%84%E8%A7%88%EF%BC%8C%E8%AE%A9%E4%B8%BB%E9%A1%B5%E6%9B%B4%E7%AE%80%E6%B4%81/">使用-more-来控制hexo-next主页文章预览，让主页更简洁 hizrd.top</a> | <a href="https://web.archive.org/web/20220925163858/http://blog.hizrd.com/2020/01/23/%E4%BD%BF%E7%94%A8-more-%E6%9D%A5%E6%8E%A7%E5%88%B6hexo-next%E4%B8%BB%E9%A1%B5%E6%96%87%E7%AB%A0%E9%A2%84%E8%A7%88%EF%BC%8C%E8%AE%A9%E4%B8%BB%E9%A1%B5%E6%9B%B4%E7%AE%80%E6%B4%81/">@archive.org</a></p>
<p>[^read-more2]: <a href="https://www.mingdao.me/Hexo/add-readmore-for-hexo/">Hexo如何在索引页显示摘要和阅读全文按钮 mingdao.me</a> | <a href="https://web.archive.org/web/20220927063247/https://www.mingdao.me/Hexo/add-readmore-for-hexo/">@archive.org</a></p>
<h2 id="需要-npm-install-插件"><a href="#需要-npm-install-插件" class="headerlink" title="需要 npm install 插件"></a>需要 npm install 插件</h2><h3 id="字数统计、阅读时长"><a href="#字数统计、阅读时长" class="headerlink" title="字数统计、阅读时长"></a>字数统计、阅读时长</h3><blockquote>
<p>首先安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>


</blockquote>
<p>主题配置文件 <code>_config.next.yml</code> 修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span> <span class="comment"># 统计信息不换行显示</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span> <span class="comment"># 文章统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span> <span class="comment"># 底部footer站点统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span> <span class="comment"># 平均字符长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment"># 阅读速度, 一分钟阅读的字数</span></span><br></pre></td></tr></table></figure>

<p>站点配置文件  <code>_config.yml</code>  新增如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增文章字数统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 阅读时长</span></span><br><span class="line">  <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span> <span class="comment"># 所有文章总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span> <span class="comment"># 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure>



<h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><blockquote>
<p>首先安装插件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-symbols-count-time</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p>站点配置文件  <code>_config.yml</code>  新增如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>

<ul>
<li>path：索引文件的路径，相对于站点根目录</li>
<li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li>
<li>limit：限制搜索的条目数</li>
</ul>
<p>主题配置文件 <code>_config.next.yml</code> 修改如下 : </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1 <span class="comment">#每篇文章中显示的搜索数量</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>[^hexo-next-cnblogs]: <a href="https://www.cnblogs.com/TechSnail/p/12933623.html">Hexo进阶设置 Next 主题优化</a> | <a href="https://web.archive.org/web/20220925093546/https://www.cnblogs.com/TechSnail/p/12933623.html">@archive.org</a></p>
<h3 id="官方-md-图片解决方案"><a href="#官方-md-图片解决方案" class="headerlink" title="官方 md 图片解决方案"></a>官方 md 图片解决方案</h3><p><a href="https://hexo.io/zh-cn/docs/asset-folders#Embedding-an-image-using-markdown">Embedding an image using markdown</a></p>
<blockquote>
<p>首先安装插件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-marked</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>


</blockquote>
<p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 introduced a new option that allows you to embed an image in markdown without using <code>asset_img</code> tag plugin.</p>
<p>To enable:</p>
<p>站点配置文件  <code>_config.yml</code>  新增如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Once enabled, an asset image will be automatically resolved to its  corresponding post’s path. For example, “image.jpg” is located at  “&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;image.jpg”, meaning it is an asset image of  “&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;“ post, <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p>
<h3 id="其他插件-laosu-hexo"><a href="#其他插件-laosu-hexo" class="headerlink" title="其他插件[^laosu-hexo]"></a>其他插件[^laosu-hexo]</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">百度推送插件</span></span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo-generator-index2 插件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/Jamling/hexo-generator-index2/blob/master/README_zh.md</span></span><br><span class="line">npm install hexo-generator-index2 --save</span><br><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">symbols_count_time 插件</span></span><br><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo-blog-encrypt 插件</span></span><br><span class="line">npm install hexo-blog-encrypt --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo-deployer-git 插件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Local Search</span></span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 Hexo 中无痛使用本地图片 https://hyf.js.org/blog/2017-06-01.no-pains-with-hexo-local-image/</span></span><br><span class="line"></span><br><span class="line">npm install hexo-asset-image-for-hexo5 --save		# https://github.com/uinika/hexo-asset-image-for-hexo5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm install https://github.com/yafey/hexo-asset-image.git --save</span></span><br><span class="line">npm install hexo-asset-img --save     # https://github.com/yiyungent/hexo-asset-img    https://www.idealx.cn/post/Hexo/hexo-asset-image/</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">npm install github:yafey/hexo-asset-image2<span class="comment">#main --save</span></span> </span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">npm i git+https://yafey:hyf4@github@github.com/yafey/hexo-asset-image2<span class="comment">#main --save</span></span></span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://www.idealx.cn/post/Hexo/hexo-asset-image/">在Hexo中使用本地图片</a></p>
<p>[^laosu-hexo]: <a href="https://laosu.ml/2021/05/07/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%A4%8D%E5%88%BB%E5%85%AC%E7%BD%91%E7%9A%84Hexo/">在群晖上复刻公网的Hexo-上海老苏</a> | <a href="https://web.archive.org/web/20220924210332/https://laosu.ml/2021/05/07/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%A4%8D%E5%88%BB%E5%85%AC%E7%BD%91%E7%9A%84Hexo/">@archive.org</a></p>
<h2 id="入侵式修改"><a href="#入侵式修改" class="headerlink" title="入侵式修改"></a>入侵式修改</h2><h3 id="调整-博客宽度"><a href="#调整-博客宽度" class="headerlink" title="调整 博客宽度"></a>调整 博客宽度</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">Next&gt;V8💕官方配置</a></li><li class="tab"><a href="#-2">过时的⚠️非官方配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><p><a href="https://theme-next.js.org/docs/advanced-settings/custom-files.html#How-to-Change-Content-Width">How to Change Content Width</a></p>
<p>Default variables for both Muse and Mist schemes are defined as:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">next/source/css/_variables/base<span class="selector-class">.styl</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span>-desktop         = <span class="number">700px</span>  	<span class="comment">// screen width &lt; 1200px</span></span><br><span class="line"><span class="variable">$content</span>-desktop-large   = <span class="number">800px</span>  	<span class="comment">// screen width &gt;= 1200px</span></span><br><span class="line"><span class="variable">$content</span>-desktop-largest = <span class="number">900px</span>  	<span class="comment">// screen width &gt;= 1600px</span></span><br></pre></td></tr></table></figure>

<p>For example, you may override these variables with percentage value to increase content width. Create and edit <code>source/_data/variables.styl</code> in site root directory and add variables:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hexo/source/_data/variables<span class="selector-class">.styl</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span>-desktop         = <span class="number">90%</span></span><br><span class="line"><span class="variable">$content</span>-desktop-large   = <span class="number">90%</span></span><br><span class="line"><span class="variable">$content</span>-desktop-largest = <span class="number">90%</span></span><br></pre></td></tr></table></figure>

<p>Then uncomment <code>variable</code> under the <code>custom_file_path</code> section in NexT config file.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">NexT</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="-2"><p><a href="https://www.jianshu.com/p/71ac0bdfdaba">Hexo next自适应宽屏</a></p>
<blockquote>
<p>效果见 <a href="https://zengwu.com.cn/">https://zengwu.com.cn</a></p>
</blockquote>
<p>电脑屏幕都1920*1080了，用的next主题配置中只有960，文章只有可怜的700，这样看起来挺别扭的，特别是有代码块的时候，基本上都显示不完要滑动。可以通过修改next主题的文章页面宽度来解决。<br> 打开<code>\themes\next\source/css/_schemes/Picses/_layout.styl</code>在文件末尾添加代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 以下为新增代码！！修改post宽度</span><br><span class="line"><span class="selector-tag">header</span>&#123; <span class="attribute">width</span>: <span class="number">80%</span> <span class="meta">!important</span>; &#125;</span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.post-header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>







<h2 id="Deployment-settings"><a href="#Deployment-settings" class="headerlink" title="Deployment settings"></a>Deployment settings</h2><h3 id="验证-ssh-key"><a href="#验证-ssh-key" class="headerlink" title="验证 ssh key"></a>验证 ssh key</h3><blockquote>
<p>验证前需在平台已添加 <code>SSH 公钥</code>，如果你是按照我前面相同的卷设置， <code>id_rsa.pub</code> 密钥在 <code>/docker/hexo/blog/.ssh</code> 目录中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec --user root -it spurin-hexo1 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 key</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -P &quot;&quot; ;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## cp pub key to github</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证 github</span> </span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 gitee.com 写入 known_hosts</span></span><br><span class="line">ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证 gitee</span></span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 e.coding.net 写入 known_hosts</span></span><br><span class="line">ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证 Coding</span></span><br><span class="line">ssh -T git@e.coding.net</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制</span></span><br><span class="line">cp -r ~/.ssh /myblog</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it spurin-hexo1 /bin/bash </span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxx@gmail.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 和 发布</span></span><br><span class="line">hexo clean &amp;&amp; hexo d github</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 生成 </span></span><br><span class="line"><span class="comment"># hexo g    # hexo generate</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 发布</span></span><br><span class="line"><span class="comment"># hexo d   # hexo deploy</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next 主题</tag>
        <tag>Synology</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Admin</title>
    <url>/2022/09/hexo-with-admin/</url>
    <content><![CDATA[<p>不要看我了。Hexo-admin 基于 node:13-slim ( node:14+ 貌似有问题）。</p>
<span id="more"></span>

<p>内置 <code>Hexo-admin</code> 的镜像。</p>
<blockquote>
<p>当然还有别的玩法，通过 Github Action 自动发布到 Github Page 仓库。也就是说每当你写完博客直接提交到源仓库即可自动触发构建。这个留待以后再研究。</p>
</blockquote>
<p><strong>什么是 hexo-admin ?</strong></p>
<blockquote>
<p>hexo-admin 是一个 Hexo 博客引擎的管理用户界面插件，能实现在线管理 hexo 博客。</p>
</blockquote>
<h1 id="安装及优化-laosu-hexo-admin"><a href="#安装及优化-laosu-hexo-admin" class="headerlink" title="安装及优化[^laosu-hexo-admin]"></a>安装及优化[^laosu-hexo-admin]</h1><p>在群晖上以 Docker 方式安装。</p>
<h2 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h2><blockquote>
<p>基于 <a href="https://github.com/spurin/docker-hexo">spurin&#x2F;docker-hexo</a> 。</p>
<blockquote>
<p>基于 node:13-slim ( node:14 有问题，See <a href="https://github.com/hexojs/hexo/issues/4275">Hexo 4275</a> )</p>
</blockquote>
</blockquote>
<p>在群晖的 <code>docker</code> 目录中新建 <code>hexo-with-admin</code>  目录，然后 <code>SSH</code> 客户端登录到群晖 ，执行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 hexo-with-admin 目录</span></span><br><span class="line">cd hexo-with-admin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建空的 Dockerfile 文件</span></span><br><span class="line">touch Dockerfile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 Dockerfile 文件</span></span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure>

<p>在 <code>Dockerfile</code> 中写入下面的内容并保存</p>
<blockquote>
<ol>
<li><p>基于 node:13-slim ( node:14 有问题，See <a href="https://github.com/hexojs/hexo/issues/4275">Hexo 4275</a> )</p>
</li>
<li><p>Dockerfile 中添加 淘宝源。[^npm-registry] </p>
<p><code>npm config set registry=http://registry.npm.taobao.org/ </code></p>
<ul>
<li><p>Dockerfile 中的写法为：  <a href="https://www.jianshu.com/p/a63808777697">Docker 入门 (12) dockerfile 部署nodejs项目</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定下载依赖淘宝镜像 , 学过前端都懂吧~</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>git clone Next 主题。（个人偏向于 不使用 npm nodemoudle 的方式  <del><code>npm install hexo-theme-next</code></del>。）</p>
<p><del>社区维护的版本：<a href="https://github.com/theme-next/hexo-theme-next">NexT v6 and v7</a> 🚩</del> ， 使用 自己改过的版本 ： <code>yafey/hexo-theme-next</code></p>
<blockquote>
<p>原作者已停止维护： <del><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></del> 本项目已停止维护。⚠️  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ git <span class="built_in">clone</span> -b yafey_config https://github.com/yafey/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p><del>清楚缓存并检测文件变动。<code>hexo clean &amp;&amp; hexo generate -w &amp; &amp;&amp; </code> (<code>hexo g -w</code> 后台运行)</del>[^Linux后台运行的几种方式] 。  <strong><code>hexo g -w</code>好像是线程阻塞的。</strong></p>
</li>
<li><p>设置为中国时区。<code>ENV TZ=CST-8</code></p>
</li>
</ol>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">13</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> James Spurin &lt;james@spurin.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># set as China time zone , otherwise , default UTC timezone will 8 hours after CST.</span></span><br><span class="line"><span class="keyword">ENV</span> TIME_ZONE=Asia/Shanghai </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TIME_ZONE</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TIME_ZONE</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the server port as an environmental</span></span><br><span class="line"><span class="keyword">ENV</span> HEXO_SERVER_PORT=<span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the git username and email</span></span><br><span class="line"><span class="keyword">ENV</span> GIT_USER=<span class="string">&quot;Joe Bloggs&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> GIT_EMAIL=<span class="string">&quot;joe@bloggs.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 npm 使用 淘宝镜像</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install requirements</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"> apt-get install git -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"> npm install -g hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set workdir</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Expose Server Port</span></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;HEXO_SERVER_PORT&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a base server and configuration if it doesnt exist, then start</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(ls -A /app)</span>&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** App directory exists and has content, continuing *****&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">else</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** App directory is empty, initialising with hexo and hexo-admin *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    hexo init &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install --save hexo-admin; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">fi</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">if</span> [ ! -f /app/requirements.txt ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** App directory contains no requirements.txt file, continuing *****&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">else</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** App directory contains a requirements.txt file, installing npm requirements *****&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cat</span> /app/requirements.txt | xargs npm --prefer-offline install --save; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">fi</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(ls -A /app/.ssh 2&gt;/dev/null)</span>&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** App .ssh directory exists and has content, continuing *****&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">else</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** App .ssh directory is empty, initialising ssh key and configuring known_hosts for common git repositories (github/gitlab) *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf ~/.ssh/* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -P <span class="string">&quot;&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ssh-keyscan github.com &gt; ~/.ssh/known_hosts 2&gt;/dev/null &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ssh-keyscan gitlab.com &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> -r ~/.ssh /app; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">fi</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;***** Running git config, user = <span class="variable">$&#123;GIT_USER&#125;</span>, email = <span class="variable">$&#123;GIT_EMAIL&#125;</span> *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  git config --global user.email <span class="variable">$&#123;GIT_EMAIL&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  git config --global user.name <span class="variable">$&#123;GIT_USER&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;***** Copying .ssh from App directory and setting permissions *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">cp</span> -r /app/.ssh ~/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa.pub &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">chmod</span> 700 ~/.ssh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;***** Contents of public ssh key (for deploy) - *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">cat</span> ~/.ssh/id_rsa.pub &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;***** download theme next - *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(ls -A /app/themes/next)</span>&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** themes/next directory exists and has content, continuing *****&quot;</span>; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">else</span> \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;***** themes/next directory is empty, download themes/next from github *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    git <span class="built_in">clone</span> -b yafey_config https://github.com/yafey/hexo-theme-next.git themes/next ; \</span></span><br><span class="line"><span class="language-bash">  <span class="keyword">fi</span>; \</span></span><br><span class="line"><span class="language-bash">  \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;***** Starting server on port <span class="variable">$&#123;HEXO_SERVER_PORT&#125;</span> *****&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  hexo clean &amp;&amp; hexo server -d -p <span class="variable">$&#123;HEXO_SERVER_PORT&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>当然更简单的办法可以用你喜欢的编辑器保存为 <code>Dockerfile</code> 文件，再把  <code>Dockerfile</code> 文件上传到 <code>hexo-with-admin</code>  目录。</p>
<p><img src="/2022/09/hexo-with-admin/20210422131648.png" alt="img"></p>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>在 <code>hexo-with-admin</code>  目录执行生成镜像的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意后面的小点</span></span><br><span class="line">docker build -t yafey/docker-hexo-admin:v1 -f .</span><br></pre></td></tr></table></figure>

<blockquote>
<p><del>如果出现</del>（肯定会出现）下面的错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">admin@DiskStation:/etc/docker$ docker build -t yafey/docker-hexo-admin:v1 .</span><br><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/spurin-HexoWithAdmin/json&quot;: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure>

<p>原因是 docker 需要 root 运行权限。[^sudo-docker]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker build -t yafey/docker-hexo-admin:v1 .    # 提升为 root 运行 docker。</span><br></pre></td></tr></table></figure>

<p>或 </p>
<p><del>切换到 root 用户下</del> （不推荐此方法，建议用上面的方式。 ）  <a href="https://blog.csdn.net/qq_35957944/article/details/116796522">https://blog.csdn.net/qq_35957944/article/details/116796522</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su -  # 切换到 root 用户。</span><br></pre></td></tr></table></figure>


</blockquote>
<p>完成后，在镜像中会找到</p>
<p><img src="/2022/09/hexo-with-admin/image-20220925013106818.png" alt="image-20220925013106818"></p>
<h2 id="配置-amp-启动容器"><a href="#配置-amp-启动容器" class="headerlink" title="配置&amp;启动容器"></a>配置&amp;启动容器</h2><h3 id="卷"><a href="#卷" class="headerlink" title="卷"></a>卷</h3><p>在 <code>docker</code> 文件夹中，创建一个新文件夹，并将其命名为 <code>hexo</code>，然后在 <code>hexo</code> 文件夹中再创建 一个新的子文件夹 <code>blog</code>。</p>
<table>
<thead>
<tr>
<th>文件夹</th>
<th>装载路径</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>/docker/_Hexo/hexo-with-Hexon-and-admin</code></td>
<td><code>/app</code></td>
<td>存放设置</td>
</tr>
</tbody></table>
<p><img src="/2022/09/hexo-with-admin/20210420111438.png" alt="img"></p>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口不冲突就行</p>
<table>
<thead>
<tr>
<th>本地端口</th>
<th>容器端口</th>
</tr>
</thead>
<tbody><tr>
<td>4000</td>
<td>4000</td>
</tr>
</tbody></table>
<p><img src="/2022/09/hexo-with-admin/20210420111503.png" alt="img"></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table>
<thead>
<tr>
<th>可变</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>GIT_USER</td>
<td>修改为您自己的 Github 用户</td>
</tr>
<tr>
<td>GIT_EMAIL</td>
<td>修改为您自己的 Github 邮箱</td>
</tr>
</tbody></table>
<blockquote>
<p>用自己的 <code>github</code> 账号是为了后续向 <code>github</code> 发布，会根据你提交的用户和邮箱生成 <code>SSH key</code>，如果只是在群晖上编辑和预览，可以随意。</p>
</blockquote>
<p><img src="/2022/09/hexo-with-admin/20210420111748.png" alt="img"></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在浏览器中输入 <code>http://群晖IP:4000</code>，开始并不能看到主界面，在日志中会显示在通过 <code>git</code> 拉取代码 ， 如果容器异常停止， 删除 目录 <code>hexo-with-Hexon-and-admin</code> 后重新启动。</p>
<p>当你看到日志中出现 <code>Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code> 时</p>
<p><img src="/2022/09/hexo-with-admin/20210420114029.png" alt="img"></p>
<p>就可以在浏览器中输入 <code>http://群晖IP:4000</code> 看到主界面了</p>
<p><img src="/2022/09/hexo-with-admin/20210420114201.png" alt="img"></p>
<p>而在浏览器中输入 <code>http://群晖IP:4000/admin</code> 即可看到 <code>hexo-admin</code> 的后台管理界面</p>
<p><img src="/2022/09/hexo-with-admin/20210420114409.png" alt="img"></p>
<hr>
<p>参考：</p>
<p>[^npm-registry]: <a href="https://blog.csdn.net/djc_18706636375/article/details/111148733">npm 切换镜像源</a></p>
<blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">查看当前源： npm config get registry</span><br><span class="line">		## 默认官方源： http:<span class="comment">//registry.npmjs.org/</span></span><br><span class="line">npm切换源：</span><br><span class="line">切换至淘宝源：npm config set registry=http:<span class="comment">//registry.npm.taobao.org/</span></span><br><span class="line">切换至华为源：npm config set registry=https:<span class="comment">//mirrors.huaweicloud.com/repository/npm/</span></span><br><span class="line">切换至npm源：npm config set registry=http:<span class="comment">//registry.npmjs.org</span></span><br><span class="line">临时使用：npm --registry https:<span class="comment">//registry.npm.taobao.org install express</span></span><br></pre></td></tr></table></figure>


</blockquote>
<p>[^laosu-hexo-admin]:           <a href="https://laosu.ml/2021/05/07/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%A4%8D%E5%88%BB%E5%85%AC%E7%BD%91%E7%9A%84Hexo/">在群晖上复刻公网的Hexo</a>  |   <a href="https://web.archive.org/web/20220924210332/https://laosu.ml/2021/05/07/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%A4%8D%E5%88%BB%E5%85%AC%E7%BD%91%E7%9A%84Hexo/">@archive.org</a>   </p>
<p>[^Linux后台运行的几种方式]:   <a href="zhuanlan.zhihu.com/p/389045898">如何让Linux命令在后台运行 - 知乎</a> ↩</p>
<blockquote>
<p>如何让Linux命令在后台运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、在你的命令后添加一个 &amp;</span><br><span class="line">2、使用<span class="built_in">bg</span>向后台发送运行命令</span><br><span class="line">3、使用 <span class="built_in">nohup</span> 向后台发送命令</span><br><span class="line">4、使用系统重定向运行后台命令</span><br><span class="line">5、使用 <span class="built_in">disown</span> 将 Linux 命令设置为后台运行</span><br><span class="line">6、使用 Tmux 在后台运行 Linux 命令</span><br></pre></td></tr></table></figure>


</blockquote>
<p>[^sudo-docker]:  <a href="https://www.linuxrumen.com/rmxx/1665.html">方法1:用sudo运行所有docker命令</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Synology</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖通过 Dockerfile 构建</title>
    <url>/2022/10/2022-synology-dockerfile-build/</url>
    <content><![CDATA[<p>群晖通过 Dockerfile 构建。  </p>
<span id="more"></span>



<h1 id="群晖通过Dockerfile构建-Image-synology-dockerfile-csdn"><a href="#群晖通过Dockerfile构建-Image-synology-dockerfile-csdn" class="headerlink" title="群晖通过Dockerfile构建 Image[^synology-dockerfile-csdn]"></a>群晖通过Dockerfile构建 Image[^synology-dockerfile-csdn]</h1><p>然后通过ssh连接群晖，登录root用户</p>
<p>cd到docker目录(cd &#x2F;docker)  —- Dockerfile 存放目录</p>
<p>构建自己的docker镜像( <strong><code>sudo docker build -t tomcat-heardfate .</code></strong> )  <strong>&#x2F;&#x2F; 这里必须要用 sudo，要不然没有权限</strong>  ， 或者 <del><code>sudo su -  </code> 切换到 root 身份。</del> [^sudo-su-root-csdn]（不推荐）</p>
<p>接着 ，去群晖的docker——&gt;映象 就会多出 tomcat-heardfate</p>
<p><img src="/Center.jpeg" alt="群晖Docker"></p>
<p>[^synology-dockerfile-csdn]: <a href="https://blog.csdn.net/heardy/article/details/73733731">群晖Docker通过Dockerfile构建镜像 部署Tomcat</a>  | <a href="https://web.archive.org/web/20221003160438/https://blog.csdn.net/heardy/article/details/73733731#">@archive.org</a><br>[^sudo-su-root-csdn]: <a href="https://web.archive.org/web/20221003170431/https://blog.csdn.net/weixin_34049032/article/details/89898671">使用sudo进入root权限，以及防止root密码被恶意篡改</a> | <a href="https://web.archive.org/web/20221003170431/https://blog.csdn.net/weixin_34049032/article/details/89898671">@archive.org</a></p>
<h1 id="push-Dockerfile-到docker-hub-push-dockerfile"><a href="#push-Dockerfile-到docker-hub-push-dockerfile" class="headerlink" title="push Dockerfile 到docker-hub[^push-dockerfile]"></a>push Dockerfile 到docker-hub[^push-dockerfile]</h1><h2 id="根据-Dockerfile-build-并测试"><a href="#根据-Dockerfile-build-并测试" class="headerlink" title="根据 Dockerfile build 并测试"></a>根据 Dockerfile build 并测试</h2><p>The docker build command processes this file generating a Docker Image in your Local Image Cache, which you can then start-up using the docker run command, or push to a permanent Image Repository.</p>
<p>docker build 创建一个docker镜像，这个镜像可以在你本地运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t mytomcat:1.0 .  # 注意最后的 &#x27;.&#x27; ,代表当前目录（Dockerfile 所在的目录）。</span><br><span class="line">docker run -p 8080:8080 -d mytomcat:1.0</span><br><span class="line">curl localhost:8080</span><br></pre></td></tr></table></figure>

<h2 id="push-到-docker-hub"><a href="#push-到-docker-hub" class="headerlink" title="push 到 docker hub"></a>push 到 docker hub</h2><p>第一步：命令行 docker 登录 。（ 不然 docker push 的时候会报 denied 错误。[^docker-push-denied-csdn]）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Docker login</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入用户名、密码</span></span><br></pre></td></tr></table></figure>

<p>第二步：修改 tag 名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必须先修改 tag 名称</span></span><br><span class="line">docker tag firstimage YOUR_DOCKERHUB_NAME/firstimage</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例： docker tag mytomcat:1.0 preparedman/mytomcat:1.0</span></span><br></pre></td></tr></table></figure>

<p>第三步：push</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push YOUR_DOCKERHUB_NAME/firstimage</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例：docker push preparedman/mytomcat:1.0</span></span><br></pre></td></tr></table></figure>

<p>Docker 测试</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//cloud.docker.com/u/preparedman/repository/docker/preparedman/mytomcat</span></span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/39508018/docker-driver-failed-programming-external-connectivity-on-endpoint-webserver">https://stackoverflow.com/que...</a></p>
<p>[^push-dockerfile]: <a href="https://cloud.tencent.com/developer/article/1518323">【docker】创建Dockerfile并push到docker-hub</a> | <a href="https://web.archive.org/web/20221003161847/https://cloud.tencent.com/developer/article/1518323">@archive.org</a><br>[^docker-push-denied-csdn]: <a href="https://blog.csdn.net/Florine113/article/details/121748462">Docker发布镜像时报错denied: requested access to the resource is denied解决办法</a> | <a href="https://web.archive.org/web/20221003171220/https://blog.csdn.net/Florine113/article/details/121748462">@archive.org</a></p>
<h1 id="GitHub-Action-自动构建项目容器镜像并-Push-到官方-Docker-Hub"><a href="#GitHub-Action-自动构建项目容器镜像并-Push-到官方-Docker-Hub" class="headerlink" title="GitHub Action 自动构建项目容器镜像并 Push 到官方 Docker Hub"></a><a href="https://senjianlu.com/2021/10/github-action-push-to-docker-hub/">GitHub Action 自动构建项目容器镜像并 Push 到官方 Docker Hub</a></h1><p><a href="https://web.archive.org/web/20220921171218/https://senjianlu.com/2021/10/github-action-push-to-docker-hub/">@archive.org</a></p>
<p>TODO.</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Synology</tag>
        <tag>群晖</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用 Waline 评论系统（Hexo Next 主题版本(V8+)的那些事）</title>
    <url>/2022/10/2022-10-Hexo-Next-v8-versions-Waline/</url>
    <content><![CDATA[<p>Hexo Next 主题版本(V8+)的那些事（使用Waline评论系统踩的坑）。</p>
<span id="more"></span>



<h1 id="使用-Waline-报错了。-waline-hexo-nexT-versions"><a href="#使用-Waline-报错了。-waline-hexo-nexT-versions" class="headerlink" title="使用 Waline 报错了。[^waline-hexo-nexT-versions]"></a>使用 Waline 报错了。[^waline-hexo-nexT-versions]</h1><blockquote>
<p><strong>本文所用版本：Hexo v6.3.0（2022_09_08），NexT-Theme v8.13.1（2022_10_03）。</strong> 本文发布时间：2022年10月4日</p>
</blockquote>
<p>使用第三方的插件, <a href="https://www.npmjs.com/package/@waline/hexo-next">@waline&#x2F;hexo-next</a> 。结果使用<code>npm install</code>在Hexo目录安装后发现并不生效，运行<code>hexo s</code>出现如下错误：</p>
<p>看起来是找不到swig模板文件，感觉有点莫名其妙。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:5000 . Press Ctrl+C to stop.</span><br><span class="line">Unhandled rejection Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig) [Line 41, Column 16]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig) [Line 54, Column 17]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_partials/head/head-unique.swig) [Line 10, Column 23]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig) [Line 3, Column 3]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_partials/header/index.swig) [Line 6, Column 15]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_partials/header/sub-menu.swig) [Line 2, Column 29]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_partials/header/sub-menu.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig) [Line 5, Column 3]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig) [Line 9, Column 12]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_partials/comments.swig) [Line 3, Column 14]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_partials/languages.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_third-party/math/index.swig) [Line 4, Column 16]</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/post.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/_third-party/quicklink.swig)</span><br><span class="line">  Template render error: (/home/finisky/themes/next/layout/inject/bodyEnd/waline.swig) [Line 5, Column 15]</span><br><span class="line">  Error: Unable to call `next_data`, which is undefined or falsey</span><br><span class="line">    at Object._prettifyError (/home/finisky/node_modules/nunjucks/src/lib.js:36:11)</span><br><span class="line">    at /home/finisky/node_modules/nunjucks/src/environment.js:563:19</span><br><span class="line">    at Template.root [as rootRenderFunc] (eval at _compile (/home/finisky/node_modules/nunjucks/src/environment.js:633:18), &lt;anonymous&gt;:45:3)</span><br><span class="line">    at Template.render (/home/finisky/node_modules/nunjucks/src/environment.js:552:10)</span><br><span class="line">    at /home/finisky/themes/next/scripts/renderer.js:32:29</span><br><span class="line">    at _View._compiled (/home/finisky/node_modules/hexo/lib/theme/view.js:136:50)</span><br><span class="line">    at _View.render (/home/finisky/node_modules/hexo/lib/theme/view.js:39:17)</span><br><span class="line">    at /home/finisky/node_modules/hexo/lib/hexo/index.js:64:21</span><br><span class="line">    at tryCatcher (/home/finisky/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at /home/finisky/node_modules/bluebird/js/release/method.js:15:34</span><br><span class="line">    at RouteStream._read (/home/finisky/node_modules/hexo/lib/hexo/router.js:47:5)</span><br><span class="line">    at RouteStream.Readable.read (node:internal/streams/readable:483:10)</span><br><span class="line">    at resume_ (node:internal/streams/readable:981:12)</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:83:21)</span><br></pre></td></tr></table></figure>



<h2 id="更新到-NexT-Theme-v8-13-1（2022-10-03）"><a href="#更新到-NexT-Theme-v8-13-1（2022-10-03）" class="headerlink" title="更新到 NexT-Theme v8.13.1（2022_10_03）"></a>更新到 NexT-Theme v8.13.1（2022_10_03）</h2><p>最后找到了问题的根源，<span style="color:red"><strong>我用的是 NexT v7.8.0</strong> </span>。<code>git log</code>看了下最新的代码已经是去年的了。</p>
<p><span style="color:blue"> <strong>再搜索发现了个更匪夷所思的事情，我发现了两个repo</strong></span>: </p>
<ul>
<li><del><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></del>  ，<code>theme-next</code> 已废弃。</li>
<li><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a> ，<span style="color:blue"><code>theme-next</code> <strong>start from v8</strong>。 </span></li>
</ul>
<p>而且前者在Google中的排名更高，Star更多。但再一看二者的最新版本，下面的居然是 v8.5.0。研究了半天终于在这找到了区别：</p>
<blockquote>
<blockquote>
<p><a href="https://github.com/next-theme/hexo-theme-next/issues/36">https://github.com/next-theme/hexo-theme-next/issues/36</a></p>
<p><a href="https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848">https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848</a></p>
</blockquote>
<ol>
<li>简单来说，问题就是 theme-next 团队的 owner 始终拒绝向其它任何团队成员提供足够的权限，且 owner 本人自 2019 年 10 月起已连续半年不在线，导致其它活跃的团队成员无法管理仓库，也无法邀请新的成员。<ul>
<li>由于对 theme-next 团队的未来不抱有期望，我作为 theme-next 的主要贡献者，自 2020 年 4 月起停止为旧的仓库贡献代码，并创建了新的组织，以确保维护工作正常进行。</li>
</ul>
</li>
<li>只要能够收到足够多的 Bugfix &#x2F; Feature Request，每月更新肯定不是问题。</li>
<li>目前已经发布的版本在这里： <a href="https://github.com/next-theme/hexo-theme-next/releases">https://github.com/next-theme/hexo-theme-next/releases</a><br> v8.0.0 版本计划在 Hexo 5.0 版本后发布。 <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">https://theme-next.js.org/docs/getting-started/upgrade.html</a></li>
</ol>
</blockquote>
<p>好了，问题变成了要把 v7.8.0 的 NexT 更新到 v8.5.0，但由于两个repo是独立的，只能手动更新<code>_config.yml</code>。而且更大的麻烦在于如果之前直接修改过模板源码，升级版本就更是费劲。</p>
<p>按照官方推荐的方式更新到 v8.5.0： <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">https://theme-next.js.org/docs/getting-started/upgrade.html</a></p>
<p>然后一切就简单了，再在Hexo目录安装<code>@waline/hexo-next</code>，<code>hexo clean &amp; hexo g</code>一次通过，效果直接看评论区。</p>
<p>[^waline-hexo-nexT-versions]: <a href="https://finisky.github.io/hexowaline/">Hexo使用Waline评论系统</a> | <a href="https://web.archive.org/web/20220925172850/https://finisky.github.io/hexowaline/">@achive.org</a> </p>
<ul>
<li><a href="https://finisky.github.io/simplestblogroll.en/">自定义 Links 页面</a> | <a href="https://web.archive.org/web/20221004120203/https://finisky.github.io/simplestblogroll.en/">@achive.org</a> </li>
<li><a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html">Hexo-5.x 与 NexT-8.x 跨版本升级</a> | <a href="https://web.archive.org/web/20220401080533/https://www.imczw.com/post/tech/hexo5-next8-updated.html">@achive.org</a></li>
</ul>
<p><a href="https://www.bilibili.com/read/cv15189271/">https://www.bilibili.com/read/cv15189271/</a></p>
<h1 id="为-Next-主题添加-Waline-评论系统-nexT-Waline-vercl-leancloudDB"><a href="#为-Next-主题添加-Waline-评论系统-nexT-Waline-vercl-leancloudDB" class="headerlink" title="为 Next 主题添加 Waline 评论系统[^nexT-Waline-vercl-leancloudDB ]"></a>为 Next 主题添加 Waline 评论系统[^nexT-Waline-vercl-leancloudDB ]</h1><p><code>Waline</code> 和 Valine 一样，也是支持基于 <a href="https://leancloud.app/">LeanCloud</a> 作为数据存储的，但是 <code>Waline</code> 支持的部署方式更多：</p>
<p>为了方便，这里我只讲述最简单，零成本的数据库建立方法。</p>
<table>
<thead>
<tr>
<th></th>
<th>Waline</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Client</strong></td>
<td><strong>Server</strong></td>
<td><strong>Storage</strong></td>
</tr>
<tr>
<td><a href="https://waline.js.org/">@waline&#x2F;client</a></td>
<td><a href="https://vercel.com/">Vercel</a></td>
<td><a href="https://leancloud.app/">LeanCloud</a></td>
</tr>
<tr>
<td><a href="https://minivaline.js.org/">MiniValine</a></td>
<td><a href="https://deta.sh/">Deta</a></td>
<td><a href="https://clodbase.net/">CloudBase</a></td>
</tr>
<tr>
<td><a href="https://github.com/asforest/AprilComment">AprilComment</a></td>
<td><a href="https://cloudbase.net/">CloudBase</a></td>
<td><a href="https://mongodb.com/">MongoDB</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://inspirecloud.com/">InspireCloud</a></td>
<td>MySQL</td>
</tr>
<tr>
<td></td>
<td><a href="https://railway.app/">Railway</a></td>
<td>SQLite</td>
</tr>
<tr>
<td></td>
<td><a href="https://render.com/">Render</a></td>
<td>PostgreSQL</td>
</tr>
<tr>
<td></td>
<td>Docker</td>
<td><a href="https://github.com/">GitHub</a></td>
</tr>
<tr>
<td></td>
<td>Virtual Host</td>
<td><a href="https://docs.deta.sh/docs/base/about">Deta Base</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="https://inspirecloud.com/docs/nodejs/database/quickstart.html">InspireCloud</a></td>
</tr>
</tbody></table>
<p>[^nexT-Waline-vercl-leancloudDB ]: <a href="https://qianfanguojin.top/2022/01/20/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BA-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-Waline-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">Hexo博客进阶：为 Next 主题添加 Waline 评论系统</a> | <a href="https://web.archive.org/web/20221004123656/https://qianfanguojin.top/2022/01/20/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BA-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-Waline-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">@achive.org</a> </p>
<ul>
<li><a href="https://blog.gezhong.vip/article/000023/waline.html#google_vignette">https://blog.gezhong.vip/article/000023/waline.html#google_vignette</a></li>
</ul>
<h2 id="第一步，配置评论数据库"><a href="#第一步，配置评论数据库" class="headerlink" title="第一步，配置评论数据库"></a>第一步，配置评论数据库</h2><p>我们需要注册一个 <a href="https://console.leancloud.app/register">Leancloud 国际版 </a>的账号，注意，一定要是 <strong>国际版</strong>(域名：<code>leancloud.app</code> )，国内版需要绑定备案的域名，比较麻烦。</p>
<ol>
<li><code>创建应用</code> – 应用名称,名称可以自己定义。</li>
<li>选择<code>开发版</code> 点击<code>创建</code>。</li>
<li>点击应用进入设置。<ul>
<li>点击应用凭证，取得我们 <code>AppKey</code> 、<code>App id</code> 、以及 <code>MasterKey</code> 。</li>
</ul>
</li>
</ol>
<h2 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h2><p>由上面的表格可以看到，<code>Waline</code> 支持多种服务端，为了最简便上手，我们使用第一种方式，即在 <code>Vercl</code> 上安装服务端。首先，点击下面的按钮，一键部署：</p>
<p><a href="https://vercel.com/import/project?template=https://github.com/walinejs/waline/tree/main/example" title="一键部署waline" one-link-mark="yes"><img src="https://vercel.com/button" alt="一键部署waline" title="一键部署waline" class=" ls-is-cached lazyloaded" fifu-width="92" fifu-height="32"></a></p>
<ol>
<li><p>应该需要注册一个账号，支持使用 <code>Github</code> 账号直接登录</p>
</li>
<li><p>登录后重新点进来，点击 <code>Create</code>，git repository 自定义。</p>
</li>
<li><p>然后等待下面 <code>Deploy</code> 构建完成，点击 <code>Go to Dashboard</code></p>
</li>
<li><p>找到 <code>Settings</code> &#x3D;&gt; <code>Environment Variables</code>，配置三个环境变量，对应如下表：</p>
<blockquote>
<p>提示</p>
<p>如果你使用 LeanCloud 国内版，请额外配置 <code>LEAN_SERVER</code> 环境变量，值为你绑定好的域名。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Lean Cloud</th>
<th>Vercel Environment</th>
</tr>
</thead>
<tbody><tr>
<td>AppID</td>
<td>LEAN_ID</td>
</tr>
<tr>
<td>AppKey</td>
<td>LEAN_KEY</td>
</tr>
<tr>
<td>MasterKey</td>
<td>LEAN_MASTER_KEY</td>
</tr>
</tbody></table>
</li>
<li><p>为了使环境变量生效，我们需要重新构建一次。在上方找到 <code>Deployments</code> ，选择第一个右边的三个点，点击 <code>Redeploy</code> 。</p>
</li>
<li><p>等待其构建结束，然后记住 <code>DOMAINS</code> 中的域名地址：<del><a href="https://xxxx.vercel.app/">https://xxxx.vercel.app</a></del> （该域名在国内无法访问，替代方案见下文） 。</p>
</li>
</ol>
<h2 id="在Hexo-Next主题中配置"><a href="#在Hexo-Next主题中配置" class="headerlink" title="在Hexo Next主题中配置"></a>在Hexo Next主题中配置</h2><p>由于 Next 主题中并不自带 <code>Waline</code> 的评论配置，我们需要安装官方提供的插件。在 <code>Hexo</code> 根目录执行：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">npm install <span class="symbol">@waline</span>/hexo-<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>找到 Next 的主题配置文件，在最后加上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Waline</span></span><br><span class="line"><span class="comment"># For more information: https://waline.js.org, https://github.com/walinejs/waline</span></span><br><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启</span></span><br><span class="line">  <span class="attr">serverURL:</span> <span class="string">waline-server-pearl.vercel.app</span> <span class="comment"># Waline #服务端地址，我们这里就是上面部署的 Vercel 地址</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请文明评论呀</span> <span class="comment"># #评论框的默认文字</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># 头像风格</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># 自定义评论框上面的三个输入框的内容</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># 评论数量多少时显示分页</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span> <span class="comment"># 语言, 可选值: en, zh-cn</span></span><br><span class="line">  <span class="comment"># Warning: 不要同时启用 `waline.visitor` 以及 `leancloud_visitors`.</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># 文章阅读统计</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># 如果为 false , 评论数量只会在当前评论页面显示, 主页则不显示</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [] <span class="comment"># 设置用户评论时必填的信息，[nick,mail]: [nick] | [nick, mail]</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="comment"># Set custom library cdn url</span></span><br></pre></td></tr></table></figure>

<p>重新部署 <code>Hexo</code> ，就可以看到结果了。</p>
<blockquote>
<p>据反馈，Hexo 似乎在 8.x 的版本使用 waline 比较稳定，如果出现 <code>hexo g</code> 出错，可尝试升级 hexo 版本。</p>
</blockquote>
<h2 id="登录服务端"><a href="#登录服务端" class="headerlink" title="登录服务端"></a>登录服务端</h2><p>由于 <code>Waline</code> 有服务端，支持评论管理。<span style="color:red"><strong>第一个账号作为管理员。</strong> </span></p>
<p>找到评论框，点击 <code>登录</code> 按钮，会弹出一个窗口，找到用户注册。</p>
<p>注册好，登录之后即可进入评论管理的后台（<a href="https://xxxx.vercel.app/ui%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AF%B9%E8%AF%84%E8%AE%BA%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E3%80%82">https://xxxx.vercel.app/ui），可以对评论进行管理。</a></p>
<ul>
<li>或者 登录到 Leancloud 上的 数据库进行管理。</li>
</ul>
<h2 id="部署后立即注册"><a href="#部署后立即注册" class="headerlink" title="部署后立即注册"></a>部署后立即注册</h2><p>部署后,会得到一个类似<code>https://pinglun.vercel.app/</code>的网址,记下来</p>
<p>然后<strong>切记</strong>进入这个网址,注册管理员,被别人注册了你就惨了 ： https:&#x2F;&#x2F;[替换成你的].vercel.app&#x2F;ui&#x2F;register</p>
<h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="自定义头像"><a href="#自定义头像" class="headerlink" title="自定义头像"></a>自定义头像</h3><p>参考：<a href="https://waline.js.org/guide/client/avatar.html">头像配置 | Waline</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://waline.js.org/guide/get-started.html">https://waline.js.org/guide/get-started.html</a></p>
<h1 id="Vercel-在中国大陆被魔法的临时解决方案-vercel-down"><a href="#Vercel-在中国大陆被魔法的临时解决方案-vercel-down" class="headerlink" title="Vercel 在中国大陆被魔法的临时解决方案[^vercel-down]"></a>Vercel 在中国大陆被魔法的临时解决方案[^vercel-down]</h1><p><strong>2022&#x2F;09&#x2F;04 更新：目前那个什么不存在的玩意实行了更高级别的魔法，*.vercel.app 已被DNS污染，目前可行的解决方案只有绑定自己的域名。</strong></p>
<p>目前 Vercel 已给出临时解决方案，</p>
<ol>
<li>即将IP 76.76.21.21 改为 <code>76.223.126.88</code> （使用CNAME 的用户可以无感知过度）</li>
<li>CNAME  cname.vercel-dns.com 改成 <code>cname-china.vercel-dns.com</code></li>
</ol>
<h2 id="域名-DNS-托管-vercel-domain"><a href="#域名-DNS-托管-vercel-domain" class="headerlink" title="域名 DNS 托管[^vercel-domain]"></a>域名 DNS 托管[^vercel-domain]</h2><ol>
<li>cloudflare</li>
<li>腾讯 DNSPod</li>
<li>阿里云</li>
</ol>
<p>以 cloudflare 为例：</p>
<blockquote>
<p>注： 实际使用时， 未设置 www 的 CNAME ， 要把 vercel-dns.com 的 代理状态关闭，不然一直 308 。</p>
</blockquote>
<p>**如果你的域名没有绑定过任何一条A记录，则添加一条域名A记录指向Vercel服务器地址 76.223.126.88 **</p>
<p><img src="/2022/10/2022-10-Hexo-Next-v8-versions-Waline/cloudflare-vervel.png" alt="cloudflare-vervel.png"></p>
<h2 id="Vercel-控制台配置"><a href="#Vercel-控制台配置" class="headerlink" title="Vercel 控制台配置"></a>Vercel 控制台配置</h2><ul>
<li><p>在 Vercel 控制面板中找到<code>Setting</code>→<code>Domains</code>→<code>Add</code>，输入域名</p>
</li>
<li><p>Add之后，如果看到下图中的提示（Invalid Configuration）👇,说明第一步域名服务商后台的配置有误，需要返回前面的步骤检查一下～</p>
<p><img src="/2022/10/2022-10-Hexo-Next-v8-versions-Waline/cloudflare-vervel-failed.png"></p>
</li>
<li><p>如果域名服务配置正常，Vercel 的卡片会变成如图的样子：</p>
<p><img src="/2022/10/2022-10-Hexo-Next-v8-versions-Waline/cloudflare-vervel-succeed.png"></p>
</li>
</ul>
<p>[^vercel-down]: <a href="https://blog.projectoms.com/pages/246.html">Vercel 在中国大陆被魔法的临时解决方案</a> | <a href="https://web.archive.org/web/20221005053011/https://blog.projectoms.com/pages/246.html">@achive.org</a></p>
<ul>
<li><a href="https://leidison.com/vercel-openwall">Vercel 被墙后国内无法访问的解决方案</a> | <a href="https://web.archive.org/web/20221005053520/https://leidison.com/vercel-openwall">@achive.org</a></li>
<li><a href="https://www.ixiqin.com/2022/03/26/solve-vercel-access-is-the-problem-of-wall-in-the-country">解决 Vercel 在国内访问被墙的问题</a> | <a href="https://web.archive.org/web/20221005053718/https://www.ixiqin.com/2022/03/26/solve-vercel-access-is-the-problem-of-wall-in-the-country/">@achive.org</a></li>
</ul>
<p>[^vercel-domain]: <a href="https://tangly1024.com/article/vercel-domain">https://tangly1024.com/article/vercel-domain</a>  | <a href="https://web.archive.org/web/20221005053520/https://leidison.com/vercel-openwall">@achive.org</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT-Theme</tag>
        <tag>Waline</tag>
      </tags>
  </entry>
</search>
